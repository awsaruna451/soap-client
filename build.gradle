plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
}

// Add this configuration to handle duplicate files
tasks.withType(Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
    implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.3'
    implementation 'com.sun.xml.bind:jaxb-xjc:4.0.3'
    
    // Add these additional dependencies for better production readiness
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.retry:spring-retry'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

// WSDL to Java generation task
task genJaxb {
    def outputDir = file("build/generated-sources/jaxb")
    def wsdlDir = file("src/main/resources/wsdl")
    def basePackage = 'com.example.soap'
    
    inputs.dir(wsdlDir)
    outputs.dir(outputDir)
    
    doLast {
        project.ant {
            taskdef name: 'xjc',
                   classname: 'com.sun.tools.xjc.XJCTask',
                   classpath: configurations.compileClasspath.asPath
            
            mkdir(dir: outputDir)
            
            // Find all WSDL files and process them
            fileTree(dir: wsdlDir, include: '*.wsdl').each { wsdlFile ->
                // Convert filename to package name (e.g., "DMSPOSService2.wsdl" -> "dmsposservice2")
                def packageSuffix = wsdlFile.name
                    .toLowerCase()
                    .take(wsdlFile.name.lastIndexOf('.'))
                    .replaceAll(/[^a-z0-9]/, '')
                
                def packageName = "${basePackage}.${packageSuffix}"
                
                xjc(destdir: outputDir,
                    package: packageName,
                    schema: wsdlFile) {
                    arg(value: '-wsdl')
                    arg(value: '-extension')
                    produces(dir: outputDir, includes: "**/*.java")
                }
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'build/generated-sources/jaxb']
        }
    }
}

compileJava.dependsOn genJaxb
